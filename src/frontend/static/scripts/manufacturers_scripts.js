// –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
var manufacturers
var csrfToken = undefined;


function handleUnknownError(error){
	const message=`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: "${error}"`;
	alert(message);
	console.log(message)
}




async function loadManufacturers(){
	let response = await fetch('/api/manufacturers/');
	
	const container=document.getElementById('manufacturers_grid');
	container.innerHTML='';

	try{
		if(!response.ok)
			throw new Error(`Response status ${response.status}`);

		let elements = await response.json();
		manufacturers=elements.manufacturers
		manufacturers.forEach(element => {
			container.innerHTML+=createManufacturerCard(element)
		});
	}
	catch(error){
		console.log(error);
	}
}
function createManufacturerCard(element){
	return `
	<div class="manufacturer-card" element-data-id="${element.id}">
		<div class="card-content">
			<p>–ù–∞–∑–≤–∞–Ω–∏–µ</p>
			<h4 class="card-title">${element.name}</h4>
		</div>
		<div class="card-button-div">
			<button class="square-btn" onclick="updateManufacturer(${element.id})"><strong>‚úé</strong></button>
			<button class="square-btn" onclick="deleteManufacturer(${element.id})"><strong>üóë</strong></button>
		</div>
	</div>
	`;// –î–æ–ø. div –¥–ª—è —Å—Ç–∏–ª—è
}
function deleteManufacturerFromHTML(id){
	const findingPart='<div class=\"manufacturer-card\"'
	const container=document.getElementById('manufacturers_grid');
	let idPos=container.innerHTML.indexOf(`\"${id}\"`)
	if(idPos===-1)
		return;
	try{
		let findingPartPos=idPos;
		let endPos=0;
		while(container.innerHTML.substring(findingPartPos,findingPartPos+findingPart.length)!=findingPart)
			--findingPartPos;

		const openedDiv='<div'
		const closedDiv='</div>'
		let divsOpened=0;
		let divsClosed=0;
		let i=findingPartPos;
		while(true){
			if(container.innerHTML.substring(i,i+openedDiv.length)==openedDiv)
				++divsOpened;
			if(container.innerHTML.substring(i,i+closedDiv.length)==closedDiv)
				++divsClosed;

			if(divsOpened===divsClosed){
				container.innerHTML=
					container.innerHTML.substring(0,findingPartPos)+
					container.innerHTML.substring(i+closedDiv.length, container.innerHTML.length-1);
				break;
			}
				

			++i;
		}
	}
	catch(error){

	}
}


async function deleteManufacturer(id){
	const manufacturer = manufacturers.find(x => x.id==id)

	fetch(`/api/manufacturers/${id}`, {method: "DELETE", headers: { 'X-CSRFToken': csrfToken}})
	.then(response => response.json())
	.then(data => {
		if(data.error){
			alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ "${manufacturer.name}": ${data.error}`);
			loadManufacturers();
		} else{
			alert(`–ü–æ—Å—Ç–∞–≤—â–∏–∫ "${manufacturer.name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω`);
			manufacturers=manufacturers.filter(element=>element.id!=id)
			deleteManufacturerFromHTML(id)
		}
	})
	.catch(error =>{ 
		handleUnknownError(error);
		loadManufacturers();
	});
}
async function updateManufacturer(id) {
	const manufacturer = manufacturers.find(x => x.id==id)
	
	let element=document.getElementById('edit_manufacturers_form');
	element.setAttribute('element-data-id',id);
	openModal('edit_manufacturers_form_overlay');
	/*
	fetch(
		`/api/manufacturers/${id}`, 
		{
			method: "PUT",
			headers: 
			{'X-CSRFToken': csrfToken, 'Content-Type': 'application/json' }, body: JSON.stringify(manufacturer)
		}
	)
	.then(response => response.json())
	.then(data => {
		if(data.error) {
			alert(`–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è "${manufacturer.name}": ${data.error}`);
			loadManufacturers();
		}
		else {
			alert(`–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è "${manufacturer.name}" –∏–∑–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ`);
		}
	})
	.catch(error =>{ 
		handleUnknownError(error);
		loadManufacturers();
	});*/
}




// –§—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
function openModal(modalId) {
	document.getElementById(modalId).style.display = 'flex';
	document.body.classList.add('no-scroll');
};

function closeModal(modalId) {
	document.getElementById(modalId).style.display = 'none';
	document.body.classList.remove('no-scroll');
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function() {
	// CSRF —Ç–æ–∫–µ–Ω
	csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
	// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
	document.getElementById('create_manufacturers_form_overlay')?.addEventListener('click', function(e) {
		if (e.target === this) closeModal('create_manufacturers_form_overlay');
	});

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
	document.getElementById('create_manufacturers_form')?.addEventListener('submit', function(e) {
		e.preventDefault();
		
		/* –ü–æ–ª—è formData:
		name		string
		csrf_token	string	*/
		const formData = new FormData(this);
		
		fetch(this.action, {
			method: 'POST',
			body: formData,
			headers: {
				'X-CSRFToken': csrfToken
			}
		})
		.then(response => response.json())
		.then(data => {
			if (data.error) {
				alert(data.error);
			} else {
				//TODO: –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
				if(data.id!=0)
					alert(`–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å \"${formData.get('name')}\"`);
				closeModal('create_manufacturers_form_overlay');
				this.reset();
				loadManufacturers()
			}
		})
		.catch(error => {
			console.error('–û—à–∏–±–∫–∞:', error);
			alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã');
		});
	});
	document.getElementById('edit_manufacturers_form')?.addEventListener('submit', function(e){
		e.preventDefault();
		
		/* –ü–æ–ª—è formData:
		name		string
		csrf_token	string	*/
		const formData = new FormData(this);
		
		fetch(this.action+this.getAttribute('element-data-id'),{
			method: 'PUT',
			body: formData,
			headers: {
				'X-CSRFToken': csrfToken
			}
		})
		.then(response => response.json())
		.then(data => {
			console.log(data);
			if(data.error){
				alert(data.error);
			} else {
				//TODO: –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
				if(data.id!=0)
					alert(`–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è \"${formData.get('name')}\"`);
				closeModal('edit_manufacturers_form_overlay');
				this.reset();
				loadManufacturers();
			}
		})
		.catch(error =>{
			console.error('–û—à–∏–±–∫–∞:', error);
			alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã');
		});
	});



	// –ó–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	loadManufacturers()
});